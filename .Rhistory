abline(v=2700, lty=3, lwd = 2, col = "#5aaa46")
res <- simLife(h=1,r1=0.1,r2=0.1,s=0.5,gen=3000,aneu=0,option = "Y")
plot((res[,6]+res[,8]), type = "l", col = "#317ec2", main = "Gamete Frequency\n Sexual Antagonism",
ylim = c(0, 1), xlim = c(0, length(res[,1])),
xlab = "", ylab = "Frequency", lwd = 3, cex.lab = 1.3)
abline(v=150, lty=3, lwd = 2, col = "#317ec2")
res <- simLife(h=1,r1=0.1,r2=0.1,s=0.5,gen=3000,aneu=0,option = "X")
lines((res[,2]+res[,4]), col = "#c03830", lwd = 3)
abline(v=650, lty=3, lwd = 2, col = "#c03830")
res <- simLife(h=1,r1=0.1,r2=0.1,s=0.5,gen=3000,aneu=0,option = "A")
lines((res[,2]+res[,4]+res[,6]+res[,8])/2, col = "#5aaa46", lwd = 3)
abline(v=2700, lty=3, lwd = 2, col = "#5aaa46")
## Legend
legend(x=1200, y=0.3, legend = c("Y Chromosome", "X Chromosome", "Autosomes", "Dotted Lines: Equilbrium Point"),
col = c("#317ec2", "#c03830", "#5aaa46", "black"), lty = c(1, 1, 1, 3), lwd = c(6, 6, 6, 3), bty ="n", cex = 2)
## Aneu
res <- simLife(h=1,r1=0.1,r2=0.1,s=0,gen=3000,aneu=0.1,option = "Y")
plot((res[,6]+res[,8]), type = "l", col = "#317ec2", main = "Gamete Frequency\n Heteromorphy-Dependant Aneuploidy",
ylim = c(0, 1), xlim = c(0, length(res[,1])),
xlab = "Generation", ylab = "Frequency", lwd = 3, cex.lab = 1.3)
abline(v=150, lty=3, lwd = 2, col = "#317ec2")
res <- simLife(h=1,r1=0.1,r2=0.1,s=0,gen=3000,aneu=0.1,option = "X")
lines((res[,2]+res[,4]), col = "#c03830", lwd = 3)
abline(v=450, lty=3, lwd = 2, col = "#c03830")
res <- simLife(h=1,r1=0.1,r2=0.1,s=0,gen=3000,aneu=0.1,option = "A")
lines((res[,2]+res[,4]+res[,6]+res[,8])/2, col = "#5aaa46", lwd = 3)
abline(v=2700, lty=3, lwd = 2, col = "#5aaa46")
abline(v=1950, lty=3, lwd = 2, col = "#5aaa46")
## Legend
legend(x=1200, y=0.3, legend = c("Y Chromosome", "X Chromosome", "Autosomes", "Dotted Lines: Equilbrium Point"),
col = c("#317ec2", "#c03830", "#5aaa46", "black"), lty = c(1, 1, 1, 3), lwd = c(6, 6, 6, 3), bty ="n", cex = 1.2)
res <- simLife(h=1,r1=0.1,r2=0.1,s=0.5,gen=3000,aneu=0,option = "Y")
plot((res[,6]+res[,8]), type = "l", col = "#317ec2", main = "Gamete Frequency\n Sexual Antagonism",
ylim = c(0, 1), xlim = c(0, length(res[,1])),
xlab = "", ylab = "Frequency", lwd = 3, cex.lab = 1.3)
abline(v=150, lty=3, lwd = 2, col = "#317ec2")
res <- simLife(h=1,r1=0.1,r2=0.1,s=0.5,gen=3000,aneu=0,option = "X")
lines((res[,2]+res[,4]), col = "#c03830", lwd = 3)
abline(v=650, lty=3, lwd = 2, col = "#c03830")
res <- simLife(h=1,r1=0.1,r2=0.1,s=0.5,gen=3000,aneu=0,option = "A")
lines((res[,2]+res[,4]+res[,6]+res[,8])/2, col = "#5aaa46", lwd = 3)
abline(v=2700, lty=3, lwd = 2, col = "#5aaa46")
## Legend
legend(x=1200, y=0.3, legend = c("Y Chromosome", "X Chromosome", "Autosomes", "Dotted Lines: Equilbrium Point"),
col = c("#317ec2", "#c03830", "#5aaa46", "black"), lty = c(1, 1, 1, 3), lwd = c(6, 6, 6, 3), bty ="n", cex = 1.2)
## Aneu
res <- simLife(h=1,r1=0.1,r2=0.1,s=0,gen=3000,aneu=0.1,option = "Y")
plot((res[,6]+res[,8]), type = "l", col = "#317ec2", main = "Gamete Frequency\n Heteromorphy-Dependant Aneuploidy",
ylim = c(0, 1), xlim = c(0, length(res[,1])),
xlab = "Generation", ylab = "Frequency", lwd = 3, cex.lab = 1.3)
abline(v=150, lty=3, lwd = 2, col = "#317ec2")
res <- simLife(h=1,r1=0.1,r2=0.1,s=0,gen=3000,aneu=0.1,option = "X")
lines((res[,2]+res[,4]), col = "#c03830", lwd = 3)
abline(v=450, lty=3, lwd = 2, col = "#c03830")
res <- simLife(h=1,r1=0.1,r2=0.1,s=0,gen=3000,aneu=0.1,option = "A")
lines((res[,2]+res[,4]+res[,6]+res[,8])/2, col = "#5aaa46", lwd = 3)
abline(v=1950, lty=3, lwd = 2, col = "#5aaa46")
# Helper: Determine if an individual is male or female.
IsMale <- function(individual) {
return(any(individual[, 1] == 1))
}
##############################################################################
# 1) GetMaleGametes()
#    - Generate N gametes from the male subpopulation.
#    - Each male is chosen with probability proportional to its fitness.
#    - Recombination is restricted to columns mincol..L.
##############################################################################
GetMaleGametes <- function(malePop, wMale, mincol, N) {
gampool <- vector("list", N)
parents <- sample(seq_along(malePop), size = N, replace = TRUE, prob = wMale)
for (i in seq_len(N)) {
mat <- malePop[[parents[i]]]
L <- ncol(mat)
start_row <- sample(1:2, 1)
# Ensure mincol does not exceed L
random_col <- sample(mincol:L, 1)
result <- numeric(L)
if (random_col > 1) {
result[1:(random_col - 1)] <- mat[start_row, 1:(random_col - 1)]
}
result[random_col:L] <- mat[3 - start_row, random_col:L]
gampool[[i]] <- result
}
return(gampool)
}
##############################################################################
# 2) GetFemaleGametes()
#    - Generate N gametes from the female subpopulation.
#    - Each female is chosen with probability proportional to its fitness.
#    - Recombination can occur anywhere from 1..L.
##############################################################################
GetFemaleGametes <- function(femalePop, wFemale, N) {
gampool <- vector("list", N)
parents <- sample(seq_along(femalePop), size = N, replace = TRUE, prob = wFemale)
for (i in seq_len(N)) {
mat <- femalePop[[parents[i]]]
L <- ncol(mat)
start_row <- sample(1:2, 1)
random_col <- sample(1:L, 1)
result <- numeric(L)
if (random_col > 1) {
result[1:(random_col - 1)] <- mat[start_row, 1:(random_col - 1)]
}
result[random_col:L] <- mat[3 - start_row, random_col:L]
gampool[[i]] <- result
}
return(gampool)
}
##############################################################################
# 3) CombineGametes()
##############################################################################
CombineGametes <- function(spermPool, eggPool) {
N <- length(spermPool)
newpop <- vector("list", N)
spermOrder <- sample(seq_len(N))
eggOrder   <- sample(seq_len(N))
for (i in seq_len(N)) {
newpop[[i]] <- rbind(spermPool[[spermOrder[i]]],
eggPool[[eggOrder[i]]])
}
return(newpop)
}
##############################################################################
# 4) GetFit()
#    - Excludes the first locus (sex-determining) from fitness calculation.
##############################################################################
GetFit <- function(pop) {
w <- numeric(length(pop))
for (i in seq_along(pop)) {
mat <- pop[[i]]
L <- ncol(mat)
if (L >= 2) {
w[i] <- prod(colMeans(mat[, 2:L, drop = FALSE]))
} else {
w[i] <- NA
}
}
return(w)
}
##############################################################################
# 5) MutPop()
#    - Prevents mutations at column 1 (sex-determining locus).
##############################################################################
MutPop <- function(pop, num.mutes, s) {
mutes <- sample(seq_along(pop), num.mutes, replace = FALSE)
for (i in mutes) {
mat <- pop[[i]]
L <- ncol(mat)
r <- sample(1:2, 1)
c <- sample(2:L, 1)
mat[r, c] <- s
pop[[i]] <- mat
}
return(pop)
}
##############################################################################
# 6) RunSim()
#    - Now takes an additional parameter num_loci to set matrix width.
##############################################################################
RunSim <- function(s = 0.95, iter, N, gen, mincol, num.mutes, num_loci = 10000) {
result <- vector("list", iter)
for (j in seq_len(iter)) {
cat("Run", j, "\n")
# Initialize population with dynamic number of loci
pop <- vector("list", N)
for (i in seq_len(N)) {
individual <- matrix(1, nrow = 2, ncol = num_loci)
individual[, 1] <- sample(c(0, 1), 2, replace = TRUE)
pop[[i]] <- individual
}
mfit <- numeric(gen)
for (g in seq_len(gen)) {
cat("Generation", g, "\n")
w <- GetFit(pop)
male_idx   <- which(sapply(pop, IsMale))
female_idx <- setdiff(seq_along(pop), male_idx)
w_male   <- w[male_idx]
w_female <- w[female_idx]
malePop   <- pop[male_idx]
femalePop <- pop[female_idx]
if (length(malePop) == 0 || length(femalePop) == 0) {
cat("Warning: All individuals are one sex. Stopping.\n")
mfit[g:gen] <- NA
break
}
spermPool <- GetMaleGametes(malePop, w_male, mincol, N)
eggPool   <- GetFemaleGametes(femalePop, w_female, N)
newpop    <- CombineGametes(spermPool, eggPool)
pop       <- MutPop(newpop, num.mutes, s)
w_new     <- GetFit(pop)
mfit[g]   <- mean(w_new, na.rm = TRUE)
}
result[[j]] <- mfit
}
result <- do.call(rbind, result)
foo <- list(result, pop)
return(foo)
}
##############################################################################
# 7) GetAllYChromosomes() and GetAllXChromosomes()
##############################################################################
GetAllYChromosomes <- function(pop) {
Ylist <- lapply(pop, function(ind) {
idx <- which(ind[, 1] == 1)
if (length(idx) > 0) ind[idx, , drop = FALSE] else NULL
})
Ylist <- Filter(Negate(is.null), Ylist)
if (length(Ylist) == 0) {
# fallback to first individual for dimension
return(matrix(nrow = 0, ncol = ncol(pop[[1]])))
} else {
return(do.call(rbind, Ylist))
}
}
GetAllXChromosomes <- function(pop) {
Xlist <- lapply(pop, function(ind) {
idx <- which(ind[, 1] == 0)
if (length(idx) > 0) ind[idx, , drop = FALSE] else NULL
})
Xlist <- Filter(Negate(is.null), Xlist)
if (length(Xlist) == 0) {
return(matrix(nrow = 0, ncol = ncol(pop[[1]])))
} else {
return(do.call(rbind, Xlist))
}
}
pop <- vector("list", N)
# Helper: Determine if an individual is male or female.
IsMale <- function(individual) {
return(any(individual[, 1] == 1))
}
##############################################################################
# 1) GetMaleGametes()
#    - Generate N gametes from the male subpopulation.
#    - Each male is chosen with probability proportional to its fitness.
#    - Recombination is restricted to columns mincol..L.
##############################################################################
GetMaleGametes <- function(malePop, wMale, mincol, N) {
gampool <- vector("list", N)
parents <- sample(seq_along(malePop), size = N, replace = TRUE, prob = wMale)
for (i in seq_len(N)) {
mat <- malePop[[parents[i]]]
L <- ncol(mat)
start_row <- sample(1:2, 1)
# Ensure mincol does not exceed L
random_col <- sample(mincol:L, 1)
result <- numeric(L)
if (random_col > 1) {
result[1:(random_col - 1)] <- mat[start_row, 1:(random_col - 1)]
}
result[random_col:L] <- mat[3 - start_row, random_col:L]
gampool[[i]] <- result
}
return(gampool)
}
##############################################################################
# 2) GetFemaleGametes()
#    - Generate N gametes from the female subpopulation.
#    - Each female is chosen with probability proportional to its fitness.
#    - Recombination can occur anywhere from 1..L.
##############################################################################
GetFemaleGametes <- function(femalePop, wFemale, N) {
gampool <- vector("list", N)
parents <- sample(seq_along(femalePop), size = N, replace = TRUE, prob = wFemale)
for (i in seq_len(N)) {
mat <- femalePop[[parents[i]]]
L <- ncol(mat)
start_row <- sample(1:2, 1)
random_col <- sample(1:L, 1)
result <- numeric(L)
if (random_col > 1) {
result[1:(random_col - 1)] <- mat[start_row, 1:(random_col - 1)]
}
result[random_col:L] <- mat[3 - start_row, random_col:L]
gampool[[i]] <- result
}
return(gampool)
}
##############################################################################
# 3) CombineGametes()
##############################################################################
CombineGametes <- function(spermPool, eggPool) {
N <- length(spermPool)
newpop <- vector("list", N)
spermOrder <- sample(seq_len(N))
eggOrder   <- sample(seq_len(N))
for (i in seq_len(N)) {
newpop[[i]] <- rbind(spermPool[[spermOrder[i]]],
eggPool[[eggOrder[i]]])
}
return(newpop)
}
##############################################################################
# 4) GetFit()
#    - Excludes the first locus (sex-determining) from fitness calculation.
##############################################################################
GetFit <- function(pop) {
w <- numeric(length(pop))
for (i in seq_along(pop)) {
mat <- pop[[i]]
L <- ncol(mat)
if (L >= 2) {
w[i] <- prod(colMeans(mat[, 2:L, drop = FALSE]))
} else {
w[i] <- NA
}
}
return(w)
}
##############################################################################
# 5) MutPop()
#    - Prevents mutations at column 1 (sex-determining locus).
##############################################################################
MutPop <- function(pop, num.mutes, s) {
mutes <- sample(seq_along(pop), num.mutes, replace = FALSE)
for (i in mutes) {
mat <- pop[[i]]
L <- ncol(mat)
r <- sample(1:2, 1)
c <- sample(2:L, 1)
mat[r, c] <- s
pop[[i]] <- mat
}
return(pop)
}
##############################################################################
# 6) RunSim()
#    - Now takes an additional parameter num_loci to set matrix width.
##############################################################################
RunSim <- function(s = 0.95, iter, N, gen, mincol, num.mutes, num_loci = 10000) {
result <- vector("list", iter)
for (j in seq_len(iter)) {
cat("Run", j, "\n")
# Initialize population with dynamic number of loci
pop <- vector("list", N)
for (i in seq_len(N)) {
individual <- matrix(1, nrow = 2, ncol = num_loci)
individual[, 1] <- sample(c(0, 1), 2, replace = TRUE)
pop[[i]] <- individual
}
mfit <- numeric(gen)
for (g in seq_len(gen)) {
cat("Generation", g, "\n")
w <- GetFit(pop)
male_idx   <- which(sapply(pop, IsMale))
female_idx <- setdiff(seq_along(pop), male_idx)
w_male   <- w[male_idx]
w_female <- w[female_idx]
malePop   <- pop[male_idx]
femalePop <- pop[female_idx]
if (length(malePop) == 0 || length(femalePop) == 0) {
cat("Warning: All individuals are one sex. Stopping.\n")
mfit[g:gen] <- NA
break
}
spermPool <- GetMaleGametes(malePop, w_male, mincol, N)
eggPool   <- GetFemaleGametes(femalePop, w_female, N)
newpop    <- CombineGametes(spermPool, eggPool)
pop       <- MutPop(newpop, num.mutes, s)
w_new     <- GetFit(pop)
mfit[g]   <- mean(w_new, na.rm = TRUE)
}
result[[j]] <- mfit
}
result <- do.call(rbind, result)
foo <- list(result, pop)
return(foo)
}
##############################################################################
# 7) GetAllYChromosomes() and GetAllXChromosomes()
##############################################################################
GetAllYChromosomes <- function(pop) {
Ylist <- lapply(pop, function(ind) {
idx <- which(ind[, 1] == 1)
if (length(idx) > 0) ind[idx, , drop = FALSE] else NULL
})
Ylist <- Filter(Negate(is.null), Ylist)
if (length(Ylist) == 0) {
# fallback to first individual for dimension
return(matrix(nrow = 0, ncol = ncol(pop[[1]])))
} else {
return(do.call(rbind, Ylist))
}
}
GetAllXChromosomes <- function(pop) {
Xlist <- lapply(pop, function(ind) {
idx <- which(ind[, 1] == 0)
if (length(idx) > 0) ind[idx, , drop = FALSE] else NULL
})
Xlist <- Filter(Negate(is.null), Xlist)
if (length(Xlist) == 0) {
return(matrix(nrow = 0, ncol = ncol(pop[[1]])))
} else {
return(do.call(rbind, Xlist))
}
}
# pop <- vector("list", N)
# for (i in seq_len(N)) {
#   individual <- matrix(1, nrow = 2, ncol = 10000)
#   # Randomly assign X/Y (0/1) to each row at locus 1
#   individual[, 1] <- sample(c(0, 1), 2, replace = TRUE)
#   pop[[i]] <- individual
# }
#
# popmat <- do.call(rbind,pop)
# plot(colMeans(popmat))
s = 0.03
iter <- 10
N <- 500
gen <- 500
mincol <- 100
num.mutes <- 500
num_loci <- 10000
foo <- RunSim(s, iter, N, gen, mincol, num.mutes)
small <- RunSim(s, iter, N, gen, mincol, num.mutes)
mean(small[[1]])
plot(colMeans(small[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes, "mean fitness",
mean(small[[1]])))
mincol <- 5000
med <- RunSim(s, iter, N, gen, mincol, num.mutes)
lines(colMeans(med[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes,
"mean fitness", mean(med[[1]])), col = "blue")
mincol <- 9900
large <- RunSim(s, iter, N, gen, mincol, num.mutes)
lines(colMeans(large[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes,
"mean fitness", mean(large[[1]])), col = "red")
#### h1-r01 plot ####
resY <- as.matrix(read.csv("data/resY-h1-r01.csv"))
plot(colMeans(small[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes, "mean fitness",
mean(small[[1]])), ylim = c(0,0.1))
mincol <- 5000
med <- RunSim(s, iter, N, gen, mincol, num.mutes)
plot(colMeans(small[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes, "mean fitness",
mean(small[[1]])), ylim = c(0,0.1))
mean(small[[1]])
plot(colMeans(small[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes, "mean fitness",
mean(small[[1]])), ylim = c(0,0.2))
lines(colMeans(med[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes,
"mean fitness", mean(med[[1]])), col = "blue")
lines(colMeans(large[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes,
"mean fitness", mean(large[[1]])), col = "red")
plot(colMeans(small[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes, "mean fitness",
mean(small[[1]])), ylim = c(0.1,0.2))
plot(colMeans(small[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes, "mean fitness",
mean(small[[1]])), ylim = c(0.12,0.16))
lines(colMeans(med[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes,
"mean fitness", mean(med[[1]])), col = "blue")
lines(colMeans(large[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes,
"mean fitness", mean(large[[1]])), col = "red")
plot(colMeans(small[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes, "mean fitness",
mean(small[[1]])), ylim = c(0.12,0.15))
s = 0.03
iter <- 10
N <- 500
gen <- 1000
mincol <- 100
num.mutes <- 500
num_loci <- 10000
small <- RunSim(s, iter, N, gen, mincol, num.mutes)
mean(small[[1]])
plot(colMeans(small[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes, "mean fitness",
mean(small[[1]])), ylim = c(0.12,0.15))
mincol <- 5000
med <- RunSim(s, iter, N, gen, mincol, num.mutes)
lines(colMeans(med[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes,
"mean fitness", mean(med[[1]])), col = "blue")
mincol <- 9900
large <- RunSim(s, iter, N, gen, mincol, num.mutes)
lines(colMeans(large[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes,
"mean fitness", mean(large[[1]])), col = "red")
plot(colMeans(small[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes, "mean fitness",
mean(small[[1]])), ylim = c(0,0.15))
mincol <- 5000
lines(colMeans(med[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes,
"mean fitness", mean(med[[1]])), col = "blue")
lines(colMeans(large[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes,
"mean fitness", mean(large[[1]])), col = "red")
plot(colMeans(small[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes, "mean fitness",
mean(small[[1]])), ylim = c(0.1,0.15))
lines(colMeans(med[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes,
"mean fitness", mean(med[[1]])), col = "blue")
lines(colMeans(large[[1]]), type="l", main =  paste("s", s, "iter", iter, "N", N, "gen", gen,
"mincol", mincol, "num.mutes", num.mutes,
"mean fitness", mean(large[[1]])), col = "red")
mean(small[[1]])
mean(med[[1]])
mean(large[[1]])
mean(small[[1,]])
plot(colMeans(do.call(rbind,large[[2]])[,2:100]))
plot(colMeans(do.call(rbind,small[[2]])[,2:100]))
View(large)
